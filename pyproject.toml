[project]
name = "w"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
requires-python = ">=3.10"
dependencies = [
    "flask>=3.1.1",
    "python-dotenv>=1.1.1",
    "requests>=2.32.4",
    "cachetools>=5.3.0",
    "flask-compress>=1.15",
    "flask-socketio>=5.5.1",
]

[project.optional-dependencies]
test = [
    "pytest>=7.4.0",
    "pytest-flask>=1.2.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "requests-mock>=1.11.0",
    "pytest-html>=3.2.0",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--cov=.",
    "--cov-report=html",
    "--cov-report=term-missing",
    "--html=tests/report.html",
    "--self-contained-html",
    "-v"
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["."]
omit = [
    "tests/*",
    "venv/*",
    ".venv/*",
    "*/venv/*",
    "*/.venv/*",
    "setup.py",
    "conftest.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
]

[dependency-groups]
dev = [
    "flask-socketio>=5.5.1",
    "pytest>=8.4.1",
    "pytest-cov>=6.2.1",
    "pytest-flask>=1.3.0",
    "pytest-html>=4.1.1",
    "pytest-mock>=3.14.1",
    "pyyaml>=6.0.2",
    "requests-mock>=1.12.1",
]

[tool.ruff]
# Target Python 3.10+
target-version = "py310"

# Line length
line-length = 88

# Exclude directories
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    "venv",
    ".venv",
    "static",
    "templates",
]

[tool.ruff.lint]
# Enable specific rule sets
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings  
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "S",   # flake8-bandit
    "T20", # flake8-print
    "PT",  # flake8-pytest-style
    "Q",   # flake8-quotes
    "RET", # flake8-return
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
    "ARG", # flake8-unused-arguments
    "DTZ", # flake8-datetimez
    "ERA", # eradicate
    "PD",  # pandas-vet
    "PGH", # pygrep-hooks
    "PL",  # pylint
    "TRY", # tryceratops
    "FLY", # flynt
    "PERF", # perflint
]

# Ignore specific rules
ignore = [
    "S101",  # Use of assert detected
    "T201",  # print found
    "B008",  # Do not perform function calls in argument defaults
    "S603",  # subprocess call: check for execution of untrusted input
    "S607",  # Starting a process with a partial executable path
    "PLR0913", # Too many arguments to function call
    "PLR0912", # Too many branches
    "PD901",   # Avoid using the generic variable name df for DataFrames
]

# Allow unfixable rules
unfixable = []

[tool.ruff.lint.per-file-ignores]
# Allow print statements in main entry point
"main.py" = ["T201"]
"weather_providers.py" = ["T201"]

[tool.ruff.format]
# Use single quotes for strings
quote-style = "single"

# Use spaces around operators
indent-style = "space"

# Keep trailing commas
skip-magic-trailing-comma = false

[tool.ruff.lint.isort]
# Sort imports
known-first-party = ["weather_providers"]
force-single-line = false
lines-after-imports = 2

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

# Ignore missing imports for third-party libraries
[[tool.mypy.overrides]]
module = [
    "flask_compress",
    "cachetools",
    "requests",
    "flask"
]
ignore_missing_imports = true
